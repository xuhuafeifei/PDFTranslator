transmission delays. This approach has been advocated by Lamport [9]. He shows how the use of virtual time implemented by logical clocks can simplify the design of a distributed mutual exclusion algorithm. Morgan [11] and Neiger and Toueg [12] develop this idea further. The last approach is pursued by Chandy and Lamport in their snapshot algorithm [3], one of the fundamental paradigms of distributed computing. Panangaden and Taylor [14] elaborate the idea leading to the characterization of "concurrent common knowledge".

Obviously, the notions of global time and global state are closely related. By Chandy and Lamport's algorithm a process can, without "freezing" the whole computation, compute the "best possible approximation" of a global state-a global state that could have occurred if all processes took a snapshot of their local state simultaneously. Although no process in the system can decide whether the snapshot state did really occur, "could have occurred" is good enough for stable properties (i.e., global predicates which remain true once they become true) like termination detection and deadlock detection, which shows that the snapshot algorithm is a general solution to these problems. (This does not depreciate the specific algorithms for those problems, however, which are often simpler and more efficient). While in some sense the snapshot algorithm computes the best possible attainable global state approximation, Lamport's virtual time algorithm is not that perfect. In fact, by mapping the partially ordered events of a distributed computation onto a linearly ordered set of integers it is losing information. Events which may happen simultaneously may get different timestamps as if they happen in some definite order. For some applications (like mutual exclusion as described by Lamport himself in [9]) this defect is not noticeable. For other purposes (e.g., distributed debugging), however, this is an important defect.

In this paper, we aim at improving Lamport's virtual time concept. We argue that a linearly ordered structure of time is not always adequate for distributed systems and that a partially ordered system of vectors forming a lattice structure is a natural representation of time in a distributed system. This non-standard model of time resembles in many respects Minkowski's relativistic space-time. In particular, it has an extended range of "simultaneity"-all events which are not causally related are simultaneous - thus representing causality in an isomorphic way without loss of information. The new notion of time together with a generalized clock synchronization algorithm yields for every process the best approximate knowledge of the "idealized" time of an external observer. (This idealized global time is quite naturally defined as the supremum of all local clock vectors). The vector structure of time

will be shown to be isomorphic to the structure of possible states as constructed by the snapshot algorithm, thus yielding a complementary view of global time and global state.

\section*{2 Event structures}

In an abstract setting, a process can be viewed as consisting of a sequence of events, where an event is an atomic transition of the local state which happens in no time. Hence, events are atomic actions which occur at processes. Usually, events are classified into three types: send events, receive events, and internal events. An internal event only causes a change of state. A send event causes a message to be sent, and a receive event causes a message to be received and the local state to be updated by the values of the message. Notice, however, that in so-called message - driven models of distributed computing (e.g., the actor model) there is only one type of event: The receipt of a message triggers the execution of an atomic action resulting in a local state update and in any finite number of messages sent to other processes. Because of their simplicity, message-driven models are attractive from an abstract point of view.  Fig. 1. An event diagram

Events are related: Events occurring at a particular process are totally ordered by their local sequence of occurrence, and each receive event has a corresponding send event. This relationship is the heart of any notion of virtual time. However, the central concept seems to be the causality relation which determines the primary characteristic of time, namely that the future cannot influence the past. Formally, an event structure [13] is a pair $(E,<)$, where $E$ is a set of events, and'$<$'is an irreflexive partial order on $E$ called the causality relation. Event structures represent distributed computations in an abstract way. For a given computation, $e<e^{\prime}$ holds if one of the following conditions holds:

(1) $e$ and $e^{\prime}$ are events in the same process and $e$ precedes $e^{\prime}$,

(2) $e$ is the sending event of a message and $e^{\prime}$ the corresponding receive event,

(3) $\exists e^{\prime \prime}$ such that $e<e^{\prime \prime}$ and $e^{\prime \prime}<e^{\prime}$.

